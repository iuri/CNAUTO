ad_library {
    TCL script test file
}

aa_register_case \
    -cats {smokle api} \
    mount_xowiki_test {
	Test xowiki mount
    } {
	aa_run_with_teardown \
	    -rollback \
	    -test_code {
	

		ns_log Notice "Running callback theme_ivc::after_instantiate"
		set package_id 1012
		set subsite_package_id [site_node::instantiate_and_mount -node_name "ivc" \
					    -package_key "acs-subsite" \
					    -package_name "IVC Motors" \
					    -context_id $package_id \
					   ]
		
		parameter::set_value -package_id $subsite_package_id -parameter "DefaultMaster" -value "/packages/theme-ivc/lib/ivc-master"
		
		set subsite_node_id [site_node::get_node_id_from_object_id -object_id $subsite_package_id]
		
		if {[apm_package_installed_p "xowiki"]} {
		    set xowiki_package_id [site_node::instantiate_and_mount \
					       -node_name "content" \
					       -package_key "xowiki" \
					       -package_name "content" \
					       -context_id $subsite_package_id \
					       -parent_node_id $subsite_node_id \
					      ]
		    
		    set instance_name "/ivc/content"
		    
		    ? {site_node::exists_p -url $instance_name} 1 \
			"created instance /ivc/content"
		    
		    array set info [site_node::get_from_url -url $instance_name -exact]
		    
		    ? {expr {$info(package_id) ne ""}} 1 "package is mounted, package_id provided"
		    
		    test subsection "Basic Setup: Package, url= $instance_name/"
		    
		    set index_vuh_params {
			{-m view}
			{-folder_id:integer 0}
		    }
		    
		    ::xowiki::Package initialize -parameter $index_vuh_params \
			-package_id $info(package_id) \
			-url $instance_name/ \
			-actual_query "" \
			-user_id 0
		    
		    ? {info exists package_id} 1 "package_id is exported"
		    ? {set package_id} $info(package_id) "package_id right value"
		    ? {::xotcl::Object isobject ::$package_id} 1 "we have a package_id object"
		    ? {$package_id package_url} /$instance_name/ "package_url"
		    ? {$package_id url} /$instance_name/
		    ? {$package_id id} $package_id "the id of the package object = package_id"
		    
		    test code [$package_id serialize]
		    
		    test subsection "Basic Setup: Folder Object"
		    ? {$package_id exists folder_id} 1 "folder_id is set"
		    set folder_id [::$package_id folder_id]
		    ? {::xotcl::Object isobject ::$folder_id} 1 "we have a folder object"
		    ? {::$folder_id name} "xowiki: $package_id" "name of folder object is 'xowiki: $package_id'"
		    ? {::$folder_id parent_id} -100  "parent_id of folder object is -100"'
		    ? {expr {[::$folder_id item_id]>0}} 1 "item_id given"
		    ? {expr {[::$folder_id revision_id]>0}} 1 "revision_id given"
		    ? {db_string count "select count(*) from cr_items where parent_id = $folder_id"} 0 \
			"folder contains no objects"
		    
		    test subsection "Create and Render Index Page"
		    ? {$package_id set object} "" "object name parsed"
		    ? {set m} view "method passed from package initialize"
		    set object [$package_id set object]
		    set page_item_id [$package_id resolve_page $object $m]
		    ? {expr {$page_item_id ne ""}} 1 "index page resolved"
		    ? {::xotcl::Object isobject ::$page_item_id} 1 "we have a page object"
		    ? {expr {[::$page_item_id item_id]>0}} 1 "item_id given"
		    ? {expr {[::$page_item_id revision_id]>0}} 1 "revision_id given"
		    ? {::$page_item_id parent_id} $folder_id "parent_id of page object is folder_id"
		    ? {::$page_item_id package_id} $package_id "package_id of page object"
		    ? {::$page_item_id name} en:index "name of resolved index page"
		    ? {::$page_item_id istype ::xowiki::Page} 1 "type or subtype of ::xowiki::Page"
		    
		    set content [$package_id call $page_item_id $m ""]
		    set content_length [string length $content]
		    ? {expr {$content_length > 1000}} 1 \
			"page rendered, content-length $content_length > 1000"
		    ? {string first Error $content} -1 "page contains no error"
		    ? {db_string count "select count(*) from cr_items where parent_id = $folder_id"} 1 \
			"folder contains the index page"
		    #test code [$page_item_id serialize]
		    
		    test subsection "Check Permissions based on default policy"
		    ? {::xo::cc user_id} 0 "user_id is guest"
		    ? {::$package_id make_link ::$page_item_id delete return_url} "" \
			"the public cannot delete this page"
		    ? {::$package_id make_link -privilege admin -link admin/ $package_id {} {}} "" \
			"the public cannot admin this package"
		}    			
	    }
    }
